mean(a, b)
(a + b)/2
(0.3333333333333333333333 + 0.63333333333333333333333333333)/2
(0.3333333333333333333333 + 0.6666666666666666666666666)/2
rm(list = ls())
# setting options
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(knitr)
# what data do we need?
# get line seg acc and rt
ls_acc_RT <- readRDS(file = "../../Scripts/lineseg/scratch/processedRTandAccData.Rda")
incorrect_trials <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48))
# observer != 25,
# observer != 47,
# observer != 48,
responseKey != "Key_x") %>%
incorrect_trials <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48),
# observer != 25,
# observer != 47,
# observer != 48,
responseKey != "Key_x") %>%
group_by(accuracy) %>%
summarise(n = n())
View(incorrect_trials)
286 + 2591
incorrect_trials <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48),
# observer != 25,
# observer != 47,
# observer != 48,
responseKey != "Key_x")
unique(incorrect_trials$observer)
#### get number of incorrect trials ####
incorrect_trials <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48),
# observer != 25,
# observer != 47,
# observer != 48,
responseKey != "Key_x") %>%
group_by(accuracy) %>%
summarise(n = n())
avg_acc_all <- ls_acc_RT %>%
filter(observer != 15,
observer != 25,
observer != 47,
observer != 48) %>%
group_by(observer, targSide) %>%
summarise(Acc = mean(accuracy))
avg_acc <- mean(avg_acc_all$Acc)
avg_acc_all <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48)) %>%
# observer != 15,
#      observer != 25,
#      observer != 47,
#      observer != 48) %>%
group_by(observer, targSide) %>%
summarise(Acc = mean(accuracy))
avg_acc2 <- mean(avg_acc_all$Acc)
avg_acc2 - avg_acc
rm(list = ls())
# setting options
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(knitr)
# what data do we need?
# get line seg acc and rt
ls_acc_RT <- readRDS(file = "../../Scripts/lineseg/scratch/processedRTandAccData.Rda")
# sort out participants
ls_acc_RT$observer <- as.numeric(as.factor(as.numeric(ls_acc_RT$observer)))
# number of participants used
num_participants <- length(unique(ls_acc_RT$observer))
# load in unprocessed data
load("../../Scripts/lineseg/scratch/unfiltered_fixDat")
load("../../Scripts/lineseg/scratch/unfiltered_trlDat")
trlDat_unf <- trlDat
# tidy
rm(trlDat)
# sort out participant levels
fixDat$observer <- as.numeric(as.factor(as.numeric(fixDat$observer)))
fixDat_unf <- fixDat
# tidy
rm(fixDat)
#### getting accuracy and mistaken keys ####
invalid_kp <- trlDat_unf %>%
group_by(responseKey) %>%
summarise(n = n()) %>%
filter(responseKey == "Key_x")
invalid_kp <- invalid_kp$n
# filter out bad participants
avg_acc_all <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48)) %>%
group_by(observer, targSide) %>%
summarise(Acc = mean(accuracy))
#### get number of incorrect trials ####
incorrect_trials <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48),
responseKey != "Key_x") %>%
group_by(accuracy) %>%
summarise(n = n())
# min acc easy
min_easy <- round(min(avg_acc_all$Acc[avg_acc_all$targSide == "easy"]), digits = 3)*100
# min acc absent
min_absent <- round(min(avg_acc_all$Acc[avg_acc_all$targSide == "absent"]), digits = 3)*100
#### sorting out fixation data ####
num_fixations <- nrow(fixDat_unf)
# get removed fixations data
load("../../Scripts/lineseg/scratch/processedFixationData")
# get difference value
num_removed <- num_fixations - nrow(fixDat)
load("scratch/dat_ACS")
# filter out participants that were removed
dat_ACS <- dat_ACS %>%
filter(SubNo >= 5)
# load data
load("scratch/dat_for")
# filter out participants that were removed
dat_for <- dat_for %>%
filter(sub_no >= 5)
mean(dat_ACS$Acc)
mean(dat_ACS$Acc[dat_ACS$SubNo != 39])
head(dat_for)
head(dat_for)
dat_for %>% group_by(search_type) %>% summarise(maxi = max(Targets), mini = min(Targets))
plt <- dat_for %>%
group_by(sub_no, search_type, trial) %>%
summarise(RT = max(RT))
plt <- dat_for %>%
group_by(sub_no, search_type, Trial) %>%
summarise(RT = max(RT))
head(plt)
plt <- dat_for %>%
group_by(sub_no, search_type, Trial) %>%
summarise(RT = max(RT)) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT))
head(plt)
plt <- dat_for %>%
group_by(sub_no, search_type, Trial) %>%
summarise(RT = max(RT)) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT))
rm(list = ls())
#### To run before sup_mat ####
# this will read in all the data and produce a file of the data to be used in
# the sup_mat for plotting etc...
#### packages ####
library(tidyverse)
#### ACS ####
#### ACS: read in data ####
# set participants to look for
participants <- 1:75
participants <- participants[!(participants %in% c(18, 32, 48, 57, 11, 31, 69))]
# setup empty frame
dat_ACS <- data.frame(SubNo = numeric(),
Trial = numeric(),
Block_trial = numeric(),
Block_num = numeric(),
Plateau_cond = numeric(),
Transition_cond = numeric(),
Run_number = numeric(),
Targ1_position = numeric(),
Targ2_position = numeric(),
FixationCheck = numeric(),
Red_targ_digit = numeric(),
Blue_targ_digit = numeric(),
Response = numeric(),
Targ_Choice = numeric(),
Acc = numeric(),
RT = numeric(),
Optimal_Choice = numeric(),
StarEndOptimal = numeric(),
Repeat_Switch = numeric(),
session = numeric())
# loop to get data
for(pp in participants){
# get file name
temp <- dir(paste("../../Data/", pp, "/adaptchoice/", sep = ""))
# setup temp frame
d <- read.csv(paste("../../Data/", pp, "/adaptchoice/",
temp[1],
sep = ""),
skip = 3, header = T, sep = "\t")
# get session info
session <- strsplit(temp[1], '[_]')[[1]]
session <- substring(session[4],5,5)
# add in session info
d$session <- session
# add to dataset
dat_ACS <- rbind(dat_ACS, d)
}
# tidy
rm(d, pp, session, temp)
# sort participant labels
dat_ACS$SubNo[dat_ACS$SubNo == "56b"] <- "56"
dat_ACS$SubNo <- as.numeric(dat_ACS$SubNo)
#### Foraging ####
#### Foraging: read in data ####
# setup empty frame
dat_for <- data.frame(Trial = numeric(),
Click_Num = numeric(),
Target_Click_Order = numeric(),
Click_X = numeric(),
Click_y = numeric(),
Item_selected = numeric(),
Item_X = numeric(),
Item_Y = numeric(),
Target_Set = numeric(),
RT = numeric(),
sub_no = numeric(),
search_type = numeric(),
Targets = numeric())
# loop through to get all data
for(pp in participants){
for(idx in 1:2){
# get file name
temp <- dir(paste("../../Data/", pp, "/foraging/", sep = ""))
# skip if string too short (i.e. data file isn't there)
if(nchar(temp[idx])<25) next
# search type info
search_info <- read.csv(paste("../../Data/", pp, "/foraging/", temp[idx], sep = ""),
nrows = 2, header = F, sep = "\t")
# store this info
participant <- pp
search_type <- substring(search_info[2,1],15,15)
Targets <- substring(search_info[2,2],14,14)
# read in file
d <- read.csv(paste("../../Data/", pp, "/foraging/", temp[idx], sep = ""),
skip = 2, header = T, sep = "\t")
# add in new info
d$sub_no <- pp
d$search_type <- search_type
d$Targets <- Targets
# bind
dat_for <- rbind(dat_for, d)
}
}
# tidy
rm(d, search_info, idx, participants, pp, participant, search_type, Targets, temp)
# need to calculate run length and switch rate
rm(list = ls())
setwd("F:/Uni/Github/IndivDIffSearch/Manuscript/sup_mat")
#### To run before sup_mat ####
# this will read in all the data and produce a file of the data to be used in
# the sup_mat for plotting etc...
#### packages ####
library(tidyverse)
#### ACS ####
#### ACS: read in data ####
# set participants to look for
participants <- 1:75
participants <- participants[!(participants %in% c(18, 32, 48, 57, 11, 31, 69))]
# setup empty frame
dat_ACS <- data.frame(SubNo = numeric(),
Trial = numeric(),
Block_trial = numeric(),
Block_num = numeric(),
Plateau_cond = numeric(),
Transition_cond = numeric(),
Run_number = numeric(),
Targ1_position = numeric(),
Targ2_position = numeric(),
FixationCheck = numeric(),
Red_targ_digit = numeric(),
Blue_targ_digit = numeric(),
Response = numeric(),
Targ_Choice = numeric(),
Acc = numeric(),
RT = numeric(),
Optimal_Choice = numeric(),
StarEndOptimal = numeric(),
Repeat_Switch = numeric(),
session = numeric())
# loop to get data
for(pp in participants){
# get file name
temp <- dir(paste("../../Data/", pp, "/adaptchoice/", sep = ""))
# setup temp frame
d <- read.csv(paste("../../Data/", pp, "/adaptchoice/",
temp[1],
sep = ""),
skip = 3, header = T, sep = "\t")
# get session info
session <- strsplit(temp[1], '[_]')[[1]]
session <- substring(session[4],5,5)
# add in session info
d$session <- session
# add to dataset
dat_ACS <- rbind(dat_ACS, d)
}
# tidy
rm(d, pp, session, temp)
# sort participant labels
dat_ACS$SubNo[dat_ACS$SubNo == "56b"] <- "56"
dat_ACS$SubNo <- as.numeric(dat_ACS$SubNo)
#### Foraging ####
#### Foraging: read in data ####
# setup empty frame
dat_for <- data.frame(Trial = numeric(),
Click_Num = numeric(),
Target_Click_Order = numeric(),
Click_X = numeric(),
Click_y = numeric(),
Item_selected = numeric(),
Item_X = numeric(),
Item_Y = numeric(),
Target_Set = numeric(),
RT = numeric(),
sub_no = numeric(),
search_type = numeric(),
Targets = numeric())
# loop through to get all data
for(pp in participants){
for(idx in 1:2){
# get file name
temp <- dir(paste("../../Data/", pp, "/foraging/", sep = ""))
# skip if string too short (i.e. data file isn't there)
if(nchar(temp[idx])<25) next
# search type info
search_info <- read.csv(paste("../../Data/", pp, "/foraging/", temp[idx], sep = ""),
nrows = 2, header = F, sep = "\t")
# store this info
participant <- pp
search_type <- substring(search_info[2,1],15,15)
Targets <- substring(search_info[2,2],14,14)
# read in file
d <- read.csv(paste("../../Data/", pp, "/foraging/", temp[idx], sep = ""),
skip = 2, header = T, sep = "\t")
# add in new info
d$sub_no <- pp
d$search_type <- search_type
d$Targets <- Targets
# bind
dat_for <- rbind(dat_for, d)
}
}
# tidy
rm(d, search_info, idx, participants, pp, participant, search_type, Targets, temp)
# need to calculate run length and switch rate
dat_for$run_length <- 0
dat_for$repetition <- 0
dat_for
head(dat_for)
dat_for[,1]
dat_for[1,1]
dat_for[2,1]
dat_for[1,2]
dat_for[1,3]
dat_for[1,9]
dat_for[1:10,9]
str(dat_for)
run_length <- 0
# start loop
for(row in 1:nrow(dat_for)){
# get current target
cur_targ <- dat_for[row, 9]
# store information
if(dat_for[row, 2] == 1){
# if first click, store as na?
dat_for[row, 15] <- NA
run_length <- 0
dat_for[row, 14] <- NA
} else {
if(dat_for[row, 9] == prev_targ){
run_length <- run_length + 1
dat_for[row, 14] <- run_length
dat_for[row, 15] <- 1
} else{
run_length <- 0
dat_for[row, 14] <- run_length
dat_for[row, 15] <- 0
}
}
# store information
prev_targ <- cur_targ
}
View(dat_for)
dat_for$run_length <- 0
dat_for$repetition <- 0
# start counter?
run_length <- 0
# start loop
for(row in 1:nrow(dat_for)){
# store information
if(dat_for[row, 2] == 1){
# if first click, store as na?
dat_for[row, 15] <- NA
run_length <- 0
dat_for[row, 14] <- NA
} else {
if(dat_for[row, 9] == dat_for[row-1, 9]){
run_length <- run_length + 1
dat_for[row, 14] <- run_length
dat_for[row, 15] <- 1
} else{
run_length <- 0
dat_for[row, 14] <- run_length
dat_for[row, 15] <- 0
}
}
print(paste(row, "/", nrow(dat_for), sep = ""))
}
View(dat_for)
# tidy
rm(row, run_length)
rm(cur_targ, prev_targ)
save(dat_ACS, file = "scratch/dat_ACS")
save(dat_for, file = "scratch/dat_for")
head(dat_for)
# mean RT by mean run length? in each condition?
plt <- dat_for %>%
na.omit() %>%
group_by(sub_no, search_type, Trial) %>%
summarise(RT = max(RT)) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT),
mean_SW = mean(repetition)) %>%
ggplot(aes(mean_SW, mean_RT, colour = search_type)) +
geom_point()
plt <- dat_for %>%
na.omit() %>%
group_by(sub_no, search_type, Trial) %>%
mutate(RT_max = max(RT) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT_max),
mean_SW = mean(repetition)) %>%
ggplot(aes(mean_SW, mean_RT, colour = search_type)) +
geom_point()
)
plt <- dat_for %>%
na.omit() %>%
group_by(sub_no, search_type, Trial) %>%
mutate(RT_max = max(RT)) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT_max),
mean_SW = mean(repetition)) %>%
ggplot(aes(mean_SW, mean_RT, colour = search_type)) +
geom_point()
plt
plt <- dat_for %>%
na.omit() %>%
group_by(sub_no, search_type, Trial) %>%
mutate(RT_max = max(RT)) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT_max),
mean_SW = mean(repetition)) %>%
ggplot(aes(mean_SW, mean_RT, colour = search_type)) +
geom_point() +
scale_fill_ptol() +
theme_bw()
plt$labels$y <- "Response Time (secs)"
plt$labels$x <- "Average Switch Rate"
plt$labels$colour <- "Search Condition"
plt
# mean RT by repetition rate? in each condition?
plt <- dat_for %>%
na.omit() %>%
group_by(sub_no, search_type, Trial) %>%
mutate(RT_max = max(RT)) %>%
group_by(sub_no, search_type) %>%
summarise(mean_RT = mean(RT_max),
mean_SW = mean(repetition)) %>%
ggplot(aes(mean_SW, mean_RT, colour = search_type)) +
geom_point() +
scale_fill_ptol() +
theme_bw() +
scale_x_continuous(breaks = c(0,0.5,1)) +
theme(legend.position = "bottom", strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm"))) +
facet_wrap(~sub_no)
plt$labels$y <- "Response Time (secs)"
plt$labels$x <- "Average Repetition Rate"
plt$labels$colour <- "Search Condition"
plt
# Packages
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(knitr)
a <- c(1:4)
head(dat_ACS)
max(dat_ACS$Block_trial)
max(dat_ACS$Block_trial)*max(dat_ACS$Block_num)
x <- seq(0,1,0.01)
x <- seq(0,1,0.01)
y <- dbinom(x, 0.5)
x <- seq(0,1,0.01)
y <- dbinom(x, 1, prob = 0.5)
plot(x,y)
warnings()
help(dbinom)
x <- seq(0,1,0.01)
y <- dbinom(x, 288, prob = 0.5)
plot(x,y)
x <- seq(0,1,0.01)
y <- dbinom(x, length(x), prob = 0.5)
plot(x,y)
x <- seq(0,1,0.01)
y <- dbinom(x*288, 288, prob = 0.5)
plot(x,y)
x <- seq(0,288,1)
y <- dbinom(x, 288, prob = 0.5)
plot(x,y)
plot(x,y/288)
plot(x/288,y)
