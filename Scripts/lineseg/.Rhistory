j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
total_owed
options(digits = 4)
# work out bills
# for 8th March 2018
elec_previous = 58242
elec_current = 59699
gas_previous = 5480
gas_current = 5888
gas <- (((gas_current - gas_previous) * 39.4 * 1.02264/3.6) * 0.02763) + (106 * 0.25)
elec <- ((elec_current - elec_previous) * 0.1586) + (106 * 0.18)
total_cost = gas + elec
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 2
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
total_owed
total_owed/4
total_weeks = 12
w_weeks = total_weeks - 2
k_weeks = total_weeks - 1
l_weeks = total_weeks - 3
j_weeks = total_weeks
all_weeks = w_weeks + j_weeks + k_weeks + l_weeks
w_owes = total_cost*(w_weeks/all_weeks)
k_owes = total_cost*(k_weeks/all_weeks)
l_owes = total_cost*(l_weeks/all_weeks)
j_owes = total_cost*(j_weeks/all_weeks)
w_owes
k_owes
l_owes
j_owes
# total owed
total_owed = w_owes + k_owes + l_owes + j_owes
97*10^6 * 15
97*10^6 * 10
97*10^6
97*10^5
library(tidyverse)
library(rethinking)
data(Howell1)
d <- Howell1
# then tidy and load in brms
rm(Howell1)
detach(package::rethinking, unload = T)
detach(package:rethinking, unload = T)
;ibrary(brms)
library(brms)
d %>%
str()
d2 <- d %>%
filter(age >= 18)
ggplot(data = tibble(x = seq(from = 100, to = 250, by = .1)),
aes(x = x, y = dnorm(x, mean = 178, ds = 20))) +
geom_line() +
ylab("density")
ggplot(data = tibble(x = seq(from = 100, to = 250, by = .1)),
aes(x = x, y = dnorm(x, mean = 178, sd = 20))) +
geom_line() +
ylab("density")
tibble(x = seq(from = -10, to = 60, by = 1)) %>%
ggplot(aes(x = x, y = dunif(x, min = 0, max = 50))) +
geom_line() +
scale_y_continuous(NULL, breaks = NULL) +
theme(panel.grid = element_blank())
sample_mu <- rnorm(1e4, 178, 20)
sample_sigma <- runif(1e4, 0, 50)
tibble(x = rnorm(1e4, sample_mu, sample_sigma)) %>%
ggplot(aes(x = x)) +
geom_density(fill = "black", size = 0) +
scale_y_continuous(NULL, breaks = NULL) +
theme(panel.grid = element_blank())
ggplot(data = d2,
aes(x = weight, y = height)) +
theme_bw() +
geom_point(shape = 1, size = 2) +
theme(panel.grid = element_blank())
setwd("F:/Uni/PhD/1st year/9-Month Report/Analyses/Experiment_2_Two_throw")
#### Level 3 group second semster 2016/17 ####
# Two Throw experiment
# This is to combine the two datasets and make one graph
# Written by Warren James
#### load libraries ####
library(tidyverse)
library(psyphy)
library(reshape2)
#### Any Functions ####
#### Notes #####
#### Any constants ####
Hoop_size <- 0.46
#### Load data ####
load("scratch/df_part2_OT")
load("scratch/df_part2_TT")
#### sort data ####
# Add grouping variable
df_part2_OT$Num_throws <- "One-Throw"
df_part2_TT$Num_throws <- "Two-Throws"
# select columns to keep
OT <- select(df_part2_OT,
Participant,
Num_throws,
Trial.no.,
Position,
HoopDelta,
abspos,
switchSlab)
TT <- select(df_part2_TT,
Participant,
Num_throws,
Trial.no.,
Position,
HoopDelta,
abspos,
switchSlab)
# combine
df <- rbind(OT,TT)
# tidy
rm(df_part2_OT, df_part2_TT, OT, TT)
#### PLOTS ####
#### PLOTS: Individual points for all positions ####
plt <- ggplot(df, aes(HoopDelta*Hoop_size,
abspos,
colour = Num_throws))
plt <- plt + geom_point(position = "jitter")
plt <- plt + facet_wrap(~Participant, nrow = 3)
plt <- plt + theme_bw()
plt <- plt + geom_vline(aes(xintercept = switchSlab*Hoop_size))
plt <- plt + scale_y_continuous(name = "Normalise Participant standing position",
limits = c(0,1.5))
plt <- plt + scale_x_continuous(name = "Delta (Metres)",
limits = c(0,10),
breaks = c(2,4,6,8,10))
# show plot
plt
pltdat <- as.tibble(df)
pltdat %>%
group_by(Participant) %>%
summarise(mean_pos = mean(abspos))
pltdat <- pltdat %>%
group_by(Participant) %>%
summarise(mean_pos = mean(abspos))
View(pltdat)
pltdat <- as.tibble(df)
pltdat <- pltdat %>%
group_by(Participant, HoopDelta) %>%
summarise(mean_pos = mean(abspos))
head(df)
pltdat <- as.tibble(df)
pltdat <- pltdat %>%
group_by(Participant, HoopDelta, Num_throws, switchSlab) %>%
summarise(mean_pos = mean(abspos))
plt <- ggplot(pltdat, aes(HoopDelta*Hoop_size,
mean_pos,
colour = Num_throws))
plt <- plt + geom_point(position = position_jitter(width=.4,height=.0))
plt <- plt + facet_wrap(~Participant, nrow = 3)
plt <- plt + theme_bw()
plt <- plt + geom_vline(aes(xintercept = switchSlab * Hoop_size))
plt <- plt + scale_y_continuous(name = "Normalise participant standing position",
limits = c(0,1))
plt <- plt + scale_x_continuous(name = "Delta (Metres)",
limits = c(0,10),
breaks = c(2,4,6,8,10))
plt$labels$colour <- "No. of Throws"
# show plot
plt
warnings()
ggsave("../../Figures/Experiment_2_Two_throw/Part2_BOTH_AvG.png",
height = 6,
width = 8,
units = "in")
plt <- ggplot(pltdat, aes(HoopDelta*Hoop_size,
mean_pos,
colour = Num_throws))
plt <- plt + geom_point(position = position_jitter(width=.4,height=.0))
plt <- plt + facet_wrap(~Participant, nrow = 3)
plt <- plt + theme_bw()
plt <- plt + geom_vline(aes(xintercept = switchSlab * Hoop_size))
plt <- plt + scale_y_continuous(name = "Normalised participant standing position",
limits = c(0,1))
plt <- plt + scale_x_continuous(name = "Delta (Metres)",
limits = c(0,10),
breaks = c(2,4,6,8,10))
plt$labels$colour <- "No. of Throws"
# show plot
plt
# save plot
ggsave("../../Figures/Experiment_2_Two_throw/Part2_BOTH_AvG.png",
height = 6,
width = 8,
units = "in")
setwd("F:/Uni/PhD/1st year/9-Month Report/Analyses/Experiment_3_Hoop_size")
#### level 3 - 2nd Semester 2017/18 ####
# Analysis script
# For their analysis, they will compare:
# Acc at easiest and hardest difficulty for Optimal and Actual Accuracy
# Probably the same thing for position (can do this, if not needed it's fine)
#### Load in the libraries ####
library(tidyverse)
library(reshape2) # might not need this one?
# set options
options(digits = 4)
#### load in wide datasets ####
# setup colnames
names <- c("participant", "minus2", "minus1", "m", "plus1", "plus2", "plus3", "type")
# Accuracy
Actual_Acc <- read.table("temp/wide_format/Actual_Acc", header = TRUE, sep = "")
Optimal_Acc <- read.csv("temp/wide_format/Optimal_Acc", header = TRUE, sep = "")
# add in type
Actual_Acc$type <- "Actual"
Optimal_Acc$type <- "Optimal"
# Position
Actual_Pos <- read.table("temp/wide_format/Actual_Pos", header = TRUE, sep = "")
Optimal_Pos <- read.table("temp/wide_format/Optimal_Pos", header = TRUE, sep = "")
# add in type
Actual_Pos$type <- "Actual"
Optimal_Pos$type <- "Optimal"
# sort out column names
colnames(Actual_Acc) <- names
colnames(Optimal_Acc) <- names
colnames(Actual_Pos) <- names
colnames(Optimal_Pos) <- names
# tidy
rm(names)
# combine the data sets
Accuracy <- rbind(Actual_Acc, Optimal_Acc)
Position <- rbind(Actual_Pos, Optimal_Pos)
# tidy?
rm(Actual_Acc, Actual_Pos, Optimal_Acc, Optimal_Pos)
# Should reorder the data so it can be analysed properly, apparently t.test packages
# need this, though I don't see why
Accuracy <- select(Accuracy,
participant,
type,
"minus2",
"minus1",
"m",
"plus1",
"plus2",
"plus3")
Position <- select(Position,
participant,
type,
"minus2",
"minus1",
"m",
"plus1",
"plus2",
"plus3")
# make sure type is a factor
Accuracy$type <- as.factor(Accuracy$type)
Position$type <- as.factor(Position$type)
# relabel as wide
Accuracy_wide <- Accuracy
Position_wide <- Position
# tidy
rm(Accuracy, Position)
#### Load in long datasets ####
# This will probably be used for the plots...
# Accuracy
load("temp/Long_format/Act_acc_long")
load("temp/Long_format/Opt_acc_long")
# set colnames
names <- c("participant",
"standard_sep",
"Mean_acc")
# rename columns
colnames(Act_acc) <- names
colnames(Opt_acc) <- names
# add in type
Act_acc$type <- "Actual"
Opt_acc$type <- "optimal"
# bind these
Accuracy_long <- rbind(Act_acc, Opt_acc)
# tidy
rm(Act_acc, Opt_acc)
# Optimal
load("temp/Long_format/Act_Pos_long")
load("temp/Long_format/Opt_Pos_long")
# set colnames
names <- c("participant",
"standard_sep",
"Mean_pos")
# rename columns
colnames(Act_pos) <- names
colnames(Opt_pos) <- names
# add in type
Act_pos$type <- "Actual"
Opt_pos$type <- "optimal"
# bind these
Position_long <- rbind(Act_pos, Opt_pos)
# tidy
rm(Act_pos, Opt_pos)
#### Plots ####
# always good to do plots first
# This will use all the different standing positions
# Could also make accuracy version just using two separations for testing
# Maybe box plots of accuracy in most extreme separations?
# Or line plots of average accuracy accross all participants?
#### Plots: Accuracy ####
temp <- group_by(Accuracy_long, type, standard_sep)
plt_dat_acc <- summarise(temp, mean_acc = mean(Mean_acc),
sd_acc = sd(Mean_acc),
N = length(Mean_acc),
se = sd_acc/sqrt(N))
# tidy
rm(temp)
# make plot
plt_acc <- ggplot(plt_dat_acc, aes(standard_sep, mean_acc, colour = type))
plt_acc <- plt_acc + geom_point()
plt_acc <- plt_acc + geom_errorbar(aes(ymin = mean_acc - se,
ymax = mean_acc + se))
plt_acc <- plt_acc + scale_y_continuous(limits = c(0,1),
breaks = c(0,0.25,0.5,0.75,1))
plt_acc <- plt_acc + scale_x_continuous(limits = c(-2.5,3.5),
breaks = seq(-2,3, by = 1))
plt_acc <- plt_acc + labs(x = "Standardised Separation",
y = "Mean Accuracy",
colour = "Type")
plt_acc <- plt_acc+ ggtitle("Average Accuracy for each hoop separation compared to
expected accuracy under the optimal strategy")
plt_acc
plt_acc <- ggplot(plt_dat_acc, aes(standard_sep, mean_acc, colour = type))
plt_acc <- plt_acc + geom_point()
plt_acc <- plt_acc + geom_errorbar(aes(ymin = mean_acc - se,
ymax = mean_acc + se))
plt_acc <- plt_acc + scale_y_continuous(limits = c(0,1),
breaks = c(0,0.25,0.5,0.75,1))
plt_acc <- plt_acc + scale_x_continuous(limits = c(-2.5,3.5),
breaks = seq(-2,3, by = 1))
plt_acc <- plt_acc + labs(x = "Standardised Separation",
y = "Mean Accuracy",
colour = "Type")
#plt_acc <- plt_acc+ ggtitle("Average Accuracy for each hoop separation compared to
plt_acc
rm(list = ls())
setwd("F:/Uni/Github/IndivDIffSearch/Scripts/lineseg")
library(tidyverse)
library(forcats)
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
# Read in and process asc file for lineseg experiment
get_detail <- function(str, detail) {
line = str[[grep(detail, str)]]
out = strsplit(line[[2]], " ")
out = unlist(out)[2]
return(out)
}
process_acs <- function(asc, ss) {
# FACES_DRAWN marks start of trial.
# It is called this as matlab code was reused from Anna's old experiment
trialStarts <- grep("DISPLAY_ON", asc)
trialEnds   <- grep("TRIAL_OVER", asc)
trialDone   <- grep("Done", asc)
nTrials <- length(trialStarts)
while (length(trialEnds)!=nTrials) 	{
# we probably have an early response or something
trialEnds <- trialEnds[-min(which(trialEnds[1:nTrials] < trialStarts))]
trialDone <- trialDone[-min(which(trialDone[1:nTrials] < trialStarts))]
}
fixDat <- tibble(
observer = numeric(),
session = character(),
trial = numeric(),
targSide = character(),
easySide = character(),
n = numeric(),
x = numeric(),
y = numeric(),
dur = numeric())
trlDat <- tibble(
observer = numeric(),
session = character(),
trial = numeric(),
targPres = character(),
targSide = character(),
row = character(),
column = character(),
easySide = character(),
responseKey = character(),
rt = numeric())
for (t in 1:nTrials) 	{
# first get fixations
trial <- asc[trialStarts[t]:trialEnds[t]]
fixationLines <- grep("EFIX", trial)
# get details of trial
details  <- asc[trialEnds[t]:trialDone[t]]
trial_id <- get_detail(details, "TRIALNO")
trial_id <- as.numeric(unlist(strsplit(trial_id, "_"))[2])
targPres <- get_detail(details, "TargPres")
targSide <- get_detail(details, "TargSide")
row      <- get_detail(details, "Row")
column   <- get_detail(details, "Column")
easySide <- get_detail(details, "Easy_Side")
response <- get_detail(details, "Key")
startTime <- unlist(strsplit(unlist(asc[trialStarts[t]])[2], " "))[1]
if (length(fixationLines)>0) {
fixations <- as.tibble(matrix(unlist(trial[fixationLines]), byrow=T, ncol=6))
fixThisTrial = tibble(
observer=pp,
session=ss,
trial=trial_id,
targSide = targSide,
easySide = easySide,
x   = as.numeric(fixations$V4),
y   = as.numeric(fixations$V5),
dur = as.numeric(fixations$V3))
# convert to stimulus coordinates
fixThisTrial$n <- 1:length(fixThisTrial$x)
fixDat <- bind_rows(fixDat, fixThisTrial)
rm(fixThisTrial)
}
endTime = unlist(strsplit(unlist(asc[trialEnds[t]])[2], " "))[1]
detTrial = data.frame(
observer=pp,
session=ss,
trial=trial_id,
targPres=targPres,
targSide=targSide,
row=row,
column=column,
easySide=easySide,
responseKey=response,
rt = (as.numeric(endTime)-as.numeric(startTime)))
trlDat = bind_rows(trlDat, detTrial)
rm(details, detTrial)
}
return(list(fixDat,trlDat))
}
participants <- 1:68
participants <- participants[!(participants %in% c(18, 32, 48, 57))]
datFolder <- '../../Data/'
fixDat <- tibble(observer=numeric(), session=character(), trial=numeric(), n=numeric(), x=numeric(), y=numeric(), dur=numeric())
trlDat <- tibble(observer=numeric(), session=character(), trial=numeric(), targPres=character(), targSide=character(), row=character(), column=character(), easySide=character(), responseKey=character())
resDat <- tibble(observer=numeric(), session=character(), xRes=numeric(), yRes=numeric())
for (pp in participants) {
print(pp)
for (ss in c('a', 'b')) 	{
print(ss)
filename = paste(datFolder, pp, '/lineseg/Ul', pp, ss, '.asc', sep="")
asc = strsplit(readLines(filename), "\t")
dat = process_acs(asc, ss)
# combine data.
fixDat = bind_rows(fixDat, dat[[1]])
trlDat = bind_rows(trlDat, dat[[2]])
# get screen res for this file
resMSG = asc[grep("GAZE_COORDS", asc )[1]]
resolution=as.numeric(unlist(strsplit(unlist(resMSG)[2], " "))[3:6])
resDat = bind_rows(resDat, tibble(observer=pp, session=ss, xRes=resolution[3]+1, yRes=resolution[4]+1))
rm(dat)
}
}
temp <- resdat %>%
group_by(xres, yres) %>%
summarise(num_participants = length(xres))
temp <- resDat %>%
group_by(xres, yres) %>%
summarise(num_participants = length(xres))
head(resDat)
temp <- resDat %>%
group_by(xRes, yRes) %>%
summarise(num_participants = length(xRes))
View(temp)
temp <- resDat %>%
group_by(xRes, yRes) %>%
summarise(num_participants = nrows(xRes))
temp <- resDat %>%
group_by(xRes, yRes) %>%
summarise(num_participants = nrow(xRes))
temp
temp <- resDat %>%
group_by(xRes, yRes) %>%
summarise(num_participants = n())
temp
temp <- resDat %>%
group_by(xRes) %>%
summarise(num_participants = n())
temp
rm(temp)
temp <- resDat %>%
group_by(xRes) %>%
summarise(num_participants = n())
temp
View(resDat)
rm(temp)
temp <- resDat %>%
group_by(xRes,session) %>%
summarise(num_participants = n())
View(temp)
temp
