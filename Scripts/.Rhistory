gather(SHVS_absent:SHVS_hard,
key = "s_type",
value = "acc")
plt_task <- dat_all %>%
ggplot(aes(ACS, acc, colour = s_type)) +
geom_point() +
facet_wrap(~s_type)
plt_task
# get some numbers
get_cors <- function(df_in, task){
# filter data
ss <- df_in %>%
filter(s_type == task)
# get cor
ci95 <- cor.test(ss$ACS, ss$acc)
output <- tibble(comparison = paste("ACS", task, sep = " "),
est = ci95$estimate,
lower = ci95$conf.int[1],
upper = ci95$conf.int[2])
return(output)
}
# get correlation data
dat_cor <- tibble()
for(i in unique(dat_all$s_type)){
dat_cor <- rbind(dat_cor, get_cors(dat_all, i))
}
# plot
dat_cor %>%
ggplot(aes(comparison, ymin = lower, ymax = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_y_continuous(limits = c(-1,1)) +
coord_flip() +
theme_bw()
# # session for LS
# acc_LS <- ls_acc_RT %>%
#   group_by(observer, session) %>%
#   summarise(Accuracy = mean(accuracy)) %>%
#   ungroup() %>%
#   mutate(Task = "LS",
#          participant = as.factor(observer)) %>%
#          # session = as.numeric(ifelse(session == "a", 1, 2))) %>%
#   select(-observer) %>%
#   spread(key = session, value = Accuracy)
#
# # cor plots
# plt_session_acc <- acc_LS %>%
#   ggplot(aes(a, b)) +
#   geom_point() + geom_text(label = participant)
dat_cor
dat_cor %>%
ggplot(aes(y = comparison, xmin = lower, xmax = upper)) +
geom_vline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_y_continuous(limits = c(-1,1))
dat_cor %>%
ggplot(aes(y = comparison, xmin = lower, xmax = upper)) +
geom_vline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1)
dat_cor %>%
ggplot(aes(y = comparison, xmin = lower, xmax = upper)) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_linerange(size = 1)
# plot
dat_cor %>%
ggplot(aes(y = comparison, xmin = lower, xmax = upper)) +
geom_vline(xintercept = 0, linetype = "dashed")
dat_cor %>%
ggplot(aes(comparison, ymin = lower, ymax = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_x_continuous(limits = c(-1,1)) +
coord_flip() +
theme_bw()
dat_cor %>%
ggplot(aes(comparison, ymin = lower, ymax = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_y_continuous(limits = c(-1,1)) +
coord_flip() +
theme_bw()
dat_cor %>%
ggplot(aes(comparison, ymin = upper, ymax = lower)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_y_continuous(limits = c(-1,1)) +
coord_flip() +
theme_bw()
dat_cor %>%
ggplot(aes(comparison, ymin = lower, ymax = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_y_continuous(limits = c(-1,1)) +
#coord_flip() +
theme_bw()
# setting options
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggthemes)
library(gridExtra)
library(knitr)
# what data do we need?
# get line seg acc and rt
ls_acc_RT <- readRDS(file = "../Scripts/lineseg/scratch/processedRTandAccData.Rda")
# load data
load("scratch/dat_ACS")
# filter out participants that were removed
dat_ACS <- dat_ACS %>%
filter(SubNo >= 5)
# probably want to work out things like accuracy etc?
# as in, exclude participants that are around chance level
# add in log2 RT
# there is a trial with RT 0 so make sure RT is greater than that too
dat_ACS <- dat_ACS %>%
mutate(log2_RT = log2(RT)) %>%
filter(RT > 0)
# load data
load("scratch/dat_for")
# filter out participants that were removed
dat_for <- dat_for %>%
filter(sub_no >= 5)
# sort out participants
ls_acc_RT$observer <- as.numeric(as.factor(as.numeric(ls_acc_RT$observer)))
# number of participants used
num_participants <- length(unique(ls_acc_RT$observer))
# load in unprocessed data
load("../Scripts/lineseg/scratch/unfiltered_fixDat")
load("../Scripts/lineseg/scratch/unfiltered_trlDat")
trlDat_unf <- trlDat
# tidy
rm(trlDat)
# sort out participant levels
fixDat$observer <- as.numeric(as.factor(as.numeric(fixDat$observer)))
fixDat_unf <- fixDat
# tidy
rm(fixDat)
#### getting accuracy and mistaken keys ####
invalid_kp <- trlDat_unf %>%
group_by(responseKey) %>%
summarise(n = n()) %>%
filter(responseKey == "Key_x")
invalid_kp <- invalid_kp$n
# filter out bad participants
avg_acc_all <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48)) %>%
group_by(observer, targSide) %>%
summarise(Acc = mean(accuracy))
#### get number of incorrect trials ####
incorrect_trials <- ls_acc_RT %>%
filter(!observer %in% c(15, 25, 47, 48),
responseKey != "Key_x") %>%
group_by(accuracy) %>%
summarise(n = n())
# min acc easy
min_easy <- round(min(avg_acc_all$Acc[avg_acc_all$targSide == "easy"]), digits = 3)*100
# min acc absent
min_absent <- round(min(avg_acc_all$Acc[avg_acc_all$targSide == "absent"]), digits = 3)*100
#### sorting out fixation data ####
num_fixations <- nrow(fixDat_unf)
# get removed fixations data
load("../Scripts/lineseg/scratch/processedFixationData")
# get difference value
num_removed <- num_fixations - nrow(fixDat)
# make the plot
plt <- ls_acc_RT %>%
group_by(observer, targSide, session) %>%
summarise(Accuracy = mean(accuracy)) %>%
ggplot(aes(targSide, Accuracy, fill = session)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_y_continuous(breaks = c(0,1)) +
theme_bw() +
theme(axis.text.x  = element_text(angle=90, vjust=0.5), legend.position = "top", strip.text.x = element_text(margin = margin(0.01,0,0.01,0, "mm"))) +
scale_fill_ptol() +
facet_wrap(~observer)
plt$labels$x <- "Target Condition"
plt
# what sort of things do we care about....
# RT by optimal choice
plt_ACS_rt_opt <- dat_ACS %>%
na.omit() %>%
mutate(Optimal_Choice = as.factor(Optimal_Choice)) %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
ggplot(aes(RT, fill = Optimal_Choice)) +
geom_histogram() +
theme_bw() +
theme(strip.text.x =  element_blank()) +
coord_cartesian(expand = FALSE) +
scale_fill_ptol() +
facet_wrap(~ Optimal_Choice)
plt_ACS_rt_opt$labels$x <- "Response Time (msecs)"
plt_ACS_rt_opt$labels$fill <- "Optimal Choice"
plt_ACS_logrt_opt <- dat_ACS %>%
na.omit() %>%
mutate(Optimal_Choice = as.factor(Optimal_Choice)) %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
ggplot(aes(log2_RT, fill = Optimal_Choice)) +
geom_histogram() +
theme_bw() +
theme(strip.text.x =  element_blank()) +
coord_cartesian(expand = FALSE) +
scale_fill_ptol() +
facet_wrap(~ Optimal_Choice)
plt_ACS_logrt_opt$labels$x <- "log2 transformed Response Time"
plt_ACS_logrt_opt$labels$fill <- "Optimal Choice"
# plot together
# grid.arrange(plt,plt1_5)
# what about RT by number of optimal choices
# only: - correct trials
#       - RT > 300ms
plt_ACS_meanrt_opt <- dat_ACS %>%
na.omit() %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
group_by(SubNo) %>%
summarise(mean_RT = mean(RT),
sum_optchoices = sum(Optimal_Choice)) %>%
ggplot(aes(sum_optchoices, mean_RT, label = SubNo)) +
geom_point() +
geom_text() +
theme_bw()
plt_ACS_meanrt_opt$labels$x <- "No. of Optimal Choices"
plt_ACS_meanrt_opt$labels$y <- "Mean RT (msecs)"
# same as above but using the log2_RT as criteria to exclude
plt2_5 <- dat_ACS %>%
na.omit() %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(log2_RT)) %>%
filter(log2_RT > log2(300),
log2_RT < log2_RT + 3 * sdev,
log2_RT > log2_RT - 3 * sdev) %>%
group_by(SubNo) %>%
summarise(mean_RT = mean(log2_RT),
sum_optchoices = sum(Optimal_Choice)) %>%
ggplot(aes(sum_optchoices, mean_RT, label = SubNo)) +
geom_point() +
geom_text() +
theme_bw()
plt2_5$labels$x <- "No. Optimal Choices"
plt2_5$labels$y <- "Mean log2 RT"
# grid.arrange(plt2, plt2_5)
# Get accuracy for each participant
# probably want to exclude participant 39 going by their accuracy
plt_ACS_mean_acc <- dat_ACS %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
ungroup() %>%
mutate(mean_acc_ov = mean(Acc)) %>%
group_by(SubNo) %>%
summarise(mean_acc = mean(Acc),
mean_acc_ov = mean(mean_acc_ov)) %>%
mutate(sd_acc = sd(mean_acc)) %>%
# filter(mean_acc > mean_acc_ov - 3*sd_acc) %>%
ggplot(aes(SubNo, mean_acc)) +
geom_point() +
theme_bw()
plt_ACS_mean_acc$labels$x <- "Participant"
plt_ACS_mean_acc$labels$y <- "Mean Accuracy"
# plt3
# RT and Acc, does this help at all?
plt4 <- dat_ACS %>%
filter(Block_num > 0) %>%
mutate(sdev = sd(RT)) %>%
filter(RT > RT - 3*sdev,
RT < RT + 3*sdev,
RT > 300) %>%
group_by(SubNo) %>%
summarise(mean_RT = mean(RT),
Accuracy = mean(Acc)) %>%
ggplot(aes(mean_RT, Accuracy, label = SubNo)) +
geom_point() +
geom_text() +
theme_bw()
# plt4
excluded <- dat_ACS %>%
filter(Block_num > 0) %>%
ungroup() %>%
mutate(mean_acc_ov = mean(Acc)) %>%
group_by(SubNo) %>%
summarise(mean_acc = mean(Acc),
mean_acc_ov = mean(mean_acc_ov)) %>%
mutate(sd_acc = sd(mean_acc)) %>%
filter(mean_acc < mean_acc_ov - 3*sd_acc)
excluded <- unique(excluded$SubNo)
# average accuracy
avg_1 <- mean(dat_ACS$Acc)
# grid.arrange(plt_ACS_rt_opt, plt_ACS_logrt_opt)
# plt_ACS_meanrt_opt
plt_ACS_mean_acc
# again, what sort of plots are we interester in?
# mean RT by repetition rate? in each condition?
plt_for_sr_rt <- dat_for %>%
na.omit() %>%
mutate(sub_no = as.numeric(as.factor(sub_no)))
plt_for_sr_rt$Search_cond <- "Feature"
plt_for_sr_rt$Search_cond[plt_for_sr_rt$search_type == 2] <- "Conjunctive"
plt_for_sr_rt <- plt_for_sr_rt %>%
# filter(!sub_no %in% c(27,40:43)) %>% # missing data for these participants
group_by(sub_no, Search_cond, Trial) %>%
mutate(RT_max = max(RT)) %>%
group_by(sub_no, Search_cond) %>%
summarise(mean_RT = mean(RT_max),
mean_SW = mean(repetition)) %>%
ggplot(aes(mean_SW, mean_RT, colour = Search_cond)) +
geom_point() +
# geom_line(aes(group = sub_no), alpha = 0.3, colour = "black") + # do we want it on one plot?
theme_bw() +
scale_x_continuous(breaks = c(0.5)) +
scale_y_continuous(breaks = c(10, 30, 50)) +
theme(legend.position = "bottom",
strip.text.x = element_text(margin = margin(0.008,0,0.008,0, "mm"))) +
scale_colour_ptol() +
facet_wrap(~sub_no)
plt_for_sr_rt$labels$y <- "Response Time (secs)"
plt_for_sr_rt$labels$x <- "Average Repetition Rate"
plt_for_sr_rt$labels$colour <- "Search Condition"
plt_for_sr_rt
# make rt plots
# do SH first
plt_sh_rt <- ls_acc_RT %>%
ggplot(aes(rt)) +
geom_histogram() +
theme_bw() +
facet_wrap(~targSide)
plt_sh_rt$labels$x <- "Response Time (msecs)"
plt_acs_logrt <- dat_ACS %>%
na.omit() %>%
mutate(Optimal_Choice = as.factor(Optimal_Choice),
sdev = sd(RT),
mean_rt = mean(RT)) %>%
filter(RT > mean_rt - 3*sdev,
RT < mean_rt + 3*sdev,
RT > 300) %>%
ggplot(aes(RT,
colour = Optimal_Choice,
fill = Optimal_Choice)) +
geom_histogram() +
theme_bw() +
theme(legend.position = "bottom",
strip.text.x = element_blank()) +
scale_colour_ptol() +
scale_fill_ptol() +
facet_wrap(~Optimal_Choice)
plt_acs_logrt$labels$x <- "Response Time (msecs)"
grid.arrange(plt_sh_rt, plt_acs_logrt, ncol = 1)
#Reaction Times
#As expected, reaction times were highly skewed (Figure \ref{fig:ls_rt_plt}), so were log2 transformed (in ms units) before the participant means were calculated for each session and target condition (Figure \ref{fig:ls_rt_plt})
# get fixation location
fixDat <- fixDat %>%
mutate(fix_loc = "central")
fixDat$fix_loc[fixDat$x < -0.1 & fixDat$easySide == "left"] <- "homogenous"
fixDat$fix_loc[fixDat$x > 0.1 & fixDat$easySide == "right"] <- "homogenous"
fixDat$fix_loc[fixDat$x < -0.1 & fixDat$easySide == "right"] <- "heterogenous"
fixDat$fix_loc[fixDat$x > 0.1 & fixDat$easySide == "left"] <- "heterogenous"
# get num fixations in these locations
table_dat_all <- fixDat %>%
group_by(targSide, fix_loc) %>%
filter(n < 6) %>%
summarise(number = n()) %>%
mutate(range = "1 < n")
table_dat_2_to_5 <- fixDat %>%
group_by(targSide, fix_loc) %>%
filter(n >= 2,
n <= 5) %>%
summarise(number = n()) %>%
mutate(range = "2 <= n <= 5")
table_dat <- rbind(table_dat_all, table_dat_2_to_5) %>%
spread(range, number)
# make table
kable(table_dat, caption = "\\label{tab:table} No. of fixations to each side in each condition.")
# average accuracy for each task
acc_ACS <- dat_ACS %>%
group_by(SubNo) %>%
summarise(Accuracy = mean(Acc)) %>%
ungroup() %>%
mutate(Task = "ACS",
participant = SubNo) %>%
select(-SubNo)
acc_LS <- ls_acc_RT %>%
group_by(observer, targSide) %>%
summarise(Accuracy = mean(accuracy)) %>%
ungroup() %>%
mutate(Task = paste("SHVS_", targSide, sep = ""),
participant = observer) %>%
select(-observer, -targSide)
# plot accuracy across tasks
dat_all <- rbind(acc_ACS, acc_LS) %>%
spread(key = Task,
value = Accuracy) %>%
gather(SHVS_absent:SHVS_hard,
key = "s_type",
value = "acc")
plt_task <- dat_all %>%
ggplot(aes(ACS, acc, colour = s_type)) +
geom_point() +
facet_wrap(~s_type)
# plt_task
# get some numbers
get_cors <- function(df_in, task){
# filter data
ss <- df_in %>%
filter(s_type == task)
# get cor
ci95 <- cor.test(ss$ACS, ss$acc)
output <- tibble(comparison = paste("ACS", task, sep = " "),
est = ci95$estimate,
lower = ci95$conf.int[1],
upper = ci95$conf.int[2])
return(output)
}
# get correlation data
dat_cor <- tibble()
for(i in unique(dat_all$s_type)){
dat_cor <- rbind(dat_cor, get_cors(dat_all, i))
}
# plot
dat_cor %>%
ggplot(aes(comparison, ymin = lower, ymax = upper)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_linerange(size = 1) +
scale_y_continuous(limits = c(-1,1)) +
coord_flip() +
theme_bw()
# # session for LS
# acc_LS <- ls_acc_RT %>%
#   group_by(observer, session) %>%
#   summarise(Accuracy = mean(accuracy)) %>%
#   ungroup() %>%
#   mutate(Task = "LS",
#          participant = as.factor(observer)) %>%
#          # session = as.numeric(ifelse(session == "a", 1, 2))) %>%
#   select(-observer) %>%
#   spread(key = session, value = Accuracy)
#
# # cor plots
# plt_session_acc <- acc_LS %>%
#   ggplot(aes(a, b)) +
#   geom_point() + geom_text(label = participant)
dat_cor
# average accuracy for each task
acc_ACS <- dat_ACS %>%
group_by(SubNo) %>%
summarise(Accuracy = mean(Acc)) %>%
ungroup() %>%
mutate(Task = "ACS",
participant = SubNo) %>%
select(-SubNo)
acc_LS <- ls_acc_RT %>%
group_by(observer, targSide) %>%
summarise(Accuracy = mean(accuracy)) %>%
ungroup() %>%
mutate(Task = paste("SHVS_", targSide, sep = ""),
participant = observer) %>%
select(-observer, -targSide)
View(acc_LS)
# session for LS
acc_LS <- ls_acc_RT %>%
group_by(observer, session) %>%
summarise(Accuracy = mean(accuracy)) %>%
ungroup() %>%
mutate(Task = "LS",
participant = as.factor(observer)) %>%
# session = as.numeric(ifelse(session == "a", 1, 2))) %>%
select(-observer) %>%
spread(key = session, value = Accuracy)
# cor plots
plt_session_acc <- acc_LS %>%
ggplot(aes(a, b)) +
geom_point() + geom_text(label = participant)
acc_ACS <- dat_ACS %>%
group_by(SubNo) %>%
summarise(Accuracy = mean(Acc)) %>%
ungroup() %>%
mutate(Task = "ACS",
participant = SubNo) %>%
select(-SubNo)
acc_LS <- ls_acc_RT %>%
group_by(observer, targSide) %>%
summarise(Accuracy = mean(accuracy)) %>%
ungroup() %>%
mutate(Task = paste("SHVS_", targSide, sep = ""),
participant = observer) %>%
select(-observer, -targSide)
acc_LS <- ls_acc_RT %>%
group_by(observer, session) %>%
summarise(Accuracy = mean(accuracy)) %>%
ungroup() %>%
mutate(Task = "LS",
participant = as.factor(observer)) %>%
# session = as.numeric(ifelse(session == "a", 1, 2))) %>%
select(-observer) %>%
spread(key = session, value = Accuracy)
plt_session_acc <- acc_LS %>%
ggplot(aes(a, b)) +
geom_point()
plt_session_acc
plt_task
dat_cor
