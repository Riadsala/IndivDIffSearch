x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 6
d = 6
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
d = 2
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x-0.02, x+0.07))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
Participants <- as.factor(seq(1:10))
Distances <- seq(1:10)
trials = seq(1,24,1)
# setup dataframe
dat_part1 <- tibble(Participant = character(),
Distances = numeric(),
Accuracy = numeric())
# simulate participants
for(p in unique(Participants)){
for(d in unique(Distances)){
if(d <= 5){
x <- 1-(0.1*d)
x <- abs(runif(1,x, x+0.1))
} else if(d > 5) {
x <- 1-(0.1*d)
x <- abs(runif(1, x-0.1, x))
}
a <- rbinom(trials, 1, x)
a <- sum(a)/max(trials)
dat_part1 <- rbind(dat_part1, data.frame(Participant = p,
Distances = d,
Accuracy = a))
}
}
# tidy
rm(a,d,p,x,Distances,Participants,trials)
# get glm of this data just to see what it looks like
m = glm(data=dat_part1, Accuracy~Distances:Participant,
family= binomial)
dat_part1$p <- predict(m, type = "response")
# plot this to check
plt <- ggplot(dat_part1, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt <- plt + facet_wrap(~Participant)
plt
rm(m, plt)
library(rstan)
df <- as.tibbble(Distances <- Distances,
inHoop <- inHoop,
Accuracy <- inHoop/12)
df <- tibbble(Distances <- Distances,
inHoop <- inHoop,
Accuracy <- inHoop/12)
df <- as.tibble(Distances <- Distances,
inHoop <- inHoop,
Accuracy <- inHoop/12)
library(tidyverse)
Distances <- c(3,5,7,9,11,13,15,19)
# Input accuracy same format as above
# example: c(12,10,8,6,2,2,2,1)
inHoop <- c(12,10,8,6,2,2,2,1)
df <- as.tibble(Distances <- Distances,
inHoop <- inHoop,
Accuracy <- inHoop/12)
#### Packages ####
library(tidyverse)
# get distances
Distances <- c(3,5,7,9,11,13,15,19)
# Input accuracy same format as above
# example: c(12,10,8,6,2,2,2,1)
inHoop <- c(12,10,8,6,2,2,2,1)
# set up Accuracy
Accuracy <- inHoop/12
df <- as.tibble(Distances <- Distances,
inHoop <- inHoop,
Accuracy <- Accuracy)
df <- as.data.frame(Distances <- Distances,
inHoop <- inHoop,
Accuracy <- Accuracy)
View(df)
df <- as.data.frame(Distances = Distances,
inHoop = inHoop,
Accuracy = Accuracy)
temp <- cbind(Distances, inHoop, Accuracy)
df <- tibble(Distances = numeric(),
inHoop = numeric(),
Accuracy = numeric()) %>%
rbind(Distancese = Distances,
inHoop = inHoop,
Accuracy = Accuracy)
View(df)
df <- tibble(Distances = numeric(),
inHoop = numeric(),
Accuracy = numeric()) %>%
cbind(Distancese = Distances,
inHoop = inHoop,
Accuracy = Accuracy)
a <- c(1,2,3)
b <- c(4,5,6)
data.frame(a,b)
df <- data.frame(Distances,
inHoop,
Accuracy)
head(df)
head(df)
m = glm(data=df, Accuracy~Distance,
family = binomial)
m = glm(data=df, Accuracy~Distances,
family = binomial)
rm(a, b)
rm(temp)
rm(Accuracy,Distances,inHoop)
accs <- c(0.90,0.75,0.25,0.10)
p = predict(m, data.frame(Distances = c(0:30)), type = "response")
p = as.numeric(p)
# empty data frame
slabs_to_test <- data.frame(acc_level = character(),
slab = numeric())
for(a in accs){
slab = which(abs(p-a/10)==min(abs(p-a/10)))
slabs_to_test <- rbind(slabs_to_test, data.frame(acc_level = as.character(a),
slab = slab))
}
View(slabs_to_test)
plt <- ggplot(df, aes(Distnaces, Accuracy))
plt <- plt + geom_point()
plt
plt <- ggplot(df, aes(Distaaces, Accuracy))
plt <- plt + geom_point()
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = binomial)),
aes(y=p),
fullrange=T, se=F)
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = binomial),
aes(y=p),
fullrange=T, se=F)
plt
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
aes(y=p),
fullrange=T, se=F)
plt
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt
# make plot
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method=glm,
method.args = list(family = "binomial"),
# aes(y=p),
fullrange=T, se=F)
plt
90/10
# empty data frame
slabs_to_test <- data.frame(acc_level = character(),
slab = numeric())
for(a in accs){
slab = which(abs(p-a/100)==min(abs(p-a/100)))
slabs_to_test <- rbind(slabs_to_test, data.frame(acc_level = as.character(a),
slab = slab))
}
View(slabs_to_test)
accs <- c(90,75,25,10)
# empty data frame
slabs_to_test <- data.frame(acc_level = character(),
slab = numeric())
for(a in accs){
slab = which(abs(p-a/100)==min(abs(p-a/100)))
slabs_to_test <- rbind(slabs_to_test, data.frame(acc_level = as.character(a),
slab = slab))
}
View(df)
View(slabs_to_test)
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(colour="black", method=glm,
method.args = list(family = "binomial"),
aes(y=p), fullrange=T, se=F)
plt
df$p <- p
df$p <- predict(m, type = "response")
plt <- ggplot(df, aes(Distances, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(colour="black", method=glm,
method.args = list(family = "binomial"),
aes(y=p), fullrange=T, se=F)
plt
rm(list = ls9)
rm(list = ls())
#### Script to work out throwing dists quickly ####
# Only need to put in Accuracy (out of 12) in the data file
# This should then work out throwing distances for each participant
#### Packages ####
library(tidyverse)
#### Constants ####
slab_size <- 0.46
#### Input data ####
# get distances
Distances <- c(3,5,7,9,11,13,15,19)
# Input accuracy same format as above
# example: c(12,10,8,6,2,2,2,1)
inHoop <- c(12,10,8,6,2,2,2,1)
# set up Accuracy
Accuracy <- inHoop/12
# set up data frame
df <- data.frame(Distances,
inHoop,
Accuracy)
# tidy
rm(Accuracy,Distances,inHoop)
#### run glm ####
m = glm(data=df, Accuracy~Distances,
family = binomial)
# extract accuracy
p = predict(m, data.frame(Distances = c(0:30)), type = "response")
p = as.numeric(p)
# add to data
df$p <- predict(m, type = "response")
##### make plot ####
plt <- ggplot(df, aes(Distances*slab_size, Accuracy))
plt <- plt + geom_point()
plt <- plt + geom_smooth(colour="black", method=glm,
method.args = list(family = "binomial"),
aes(y=p), fullrange=T, se=F)
plt
#### get slabs to test ####
# acc levels
accs <- c(90,75,25,10)
# empty data frame
slabs_to_test <- data.frame(acc_level = character(),
slab = numeric())
for(a in accs){
slab = which(abs(p-a/100)==min(abs(p-a/100)))
slabs_to_test <- rbind(slabs_to_test, data.frame(acc_level = as.character(a),
slab = slab))
}
slabs_to_test
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
devtools::install_github("dgrtwo/gganimate")
devtools::install_github("dgrtwo/gganimate")
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
library(devtools)
devtools::install_github("dgrtwo/gganimate")
install.packages("devtools")
library(devtools)
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
2 * (0.75 * (pi * 2)^2) + 2^2
4* pi + 4
8* pi + 4
pi * 2^2
1.5 * (pi * 2^2)
1.5 * (pi * 2^2) + 2^2
6 * pi + 4
6 * pi
1.5 * pi * 2^2
temp <- c("some","thing")
sample(temp, 100)
sample(temp, 100, replace = T)
sample(temp, 100, replace = T, prob = 0.8)
sample(temp, 100, replace = T, prob = c(0.8, 0.2))
sample(temp, 100, replace = T, prob = c(0.5, 0.5))
To <- 0.55 + 0.95 + 0.9 + 1.25 +
1.98 + 2.9 + 0.75
W <- 24.69 + 0.9 + 0.95
W + To
K <- 54.59 - (W + To)
K
W
49 + 84 + 168 + 166 + 60 + 269 + 100 + 85 + 100 + 60 + 60 + 55 + 30 + 95 + 18 + 150 + 300
49 + 84 + 168 + 166 + 60 + 269 + 100 + 85 + 100 + 60 + 60 + 55 + 30 + 95 + 18 + 150 + 300 + 28
W <- 24.69 + 0.9 + 0.95
To <- 0.55 + 0.95 + 0.9 + 1.25 +
1.98 + 2.9 + 0.75
K <- Total - (W + To)
Total <- 54.59
W <- 24.69 + 0.9 + 0.95
To <- 0.55 + 0.95 + 0.9 + 1.25 +
1.98 + 2.9 + 0.75
K <- Total - (W + To)
W + To/2
K + To/2
2e
x <- seq(1, 100, 1)
y <- logit(2*x + -2)
library(psyphy)
y <- logit(2*x + -2)
logit(2)
logistic(2)
library(psych)
logit(2)
logit(1)
logit(0.5)
y <- logit(2*x + -2)
y
?scale
setwd("F:/Uni/Github/IndivDIffSearch/Scripts")
library(tidyverse)
library(rethinking)
install.packages("ggridges")
library(tidyverse)
library(rethinking)
library(ggridges)
figXn <- 6
figYn <- 4
dat <- as.data.frame(read_csv("summaryData.csv"))
dat <- dat[complete.cases(dat),]
bayes_R2 <- function(x, y) {
x <- scale(x)
y <- scale(y)
df <- data.frame(x = x, y = y)
m <- map2stan(
alist(
y ~ dnorm(mu, sigma),
mu <- a + b*x,
a ~ dnorm(0, 1),
b ~ dnorm(0, 1),
sigma ~ dcauchy(0, 1)),
start = list(a = mean(y), b = 0, sigma = sd(y)),
data = df)
print(precis(m))
post <- extract.samples(m)
R2 = array(NA, 1000)
for (ii in 1:1000) {
R2[ii] <- 1 - sum((post$a[ii]+ post$b[ii] * x - y)^2) /  sum((y - mean(y))^2)
}
return(R2)
}
head(dat)
summary(lm(scale(dat$ls_mean_log_rt) ~ scale(dat$fg_conj_log2)))
R2_ls_ac <- bayes_R2(dat$ls_mean_log_rt, dat$ac_meanlog2rt)
rm(list = ls())
setwd("F:/Uni/Github/IndivDIffSearch/Scripts")
library(tidyverse)
figXn <- 3.5
figYn <- 2.5
dat <- read_csv("summaryData.csv")
############################################################
# first look at rt
############################################################
#  split-half v adaptive choice
r <- round(with(dat, cor.test(ls_mean_log_rt, ac_meanlog2rt)$estimate), 3)
x_labels = c(1,2, 3, 4, 5, 6, 7, 8)
x_breaks = log(1000* x_labels, 2)
y_labels = c(2, 2.5, 3, 3.5, 4, 4.5, 5)
y_breaks = log(1000*y_labels, 2)
plt <- ggplot(dat, aes(x = ls_mean_log_rt, y = ac_meanlog2rt))
plt <- plt + geom_point()
plt <- plt + geom_smooth(method = lm, colour = "black", fullrange = TRUE, linetype = 0)
plt <- plt + theme_bw()
plt <- plt + scale_x_continuous("split-half: mean log rt (s)",
limits = c(0, 14.5 ), breaks = x_breaks, labels = x_labels)
plt <- plt + scale_y_continuous("adaptive choice: mean log rt (s)",
breaks = y_breaks, labels = y_labels)
plt <- plt + coord_cartesian(xlim=c(9.9, 13.1), ylim=c(11,12.3))
plt <- plt + theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
plt
